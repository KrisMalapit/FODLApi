//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FODLApi.FODLWebServiceMinesite {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FODL_Web_Service_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/FODL_Web_Service")]
    public partial class FODL_Web_Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DownloadDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadToNavisionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FODL_Web_Service() {
            this.Url = global::FODLApi.Properties.Settings.Default.FODLApi_FODLWebServiceMinesite_FODL_Web_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DownloadDepartmentCompletedEventHandler DownloadDepartmentCompleted;
        
        /// <remarks/>
        public event UploadToNavisionCompletedEventHandler UploadToNavisionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/FODL_Web_Service:DownloadDepartment", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/FODL_Web_Service", ResponseElementName="DownloadDepartment_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/FODL_Web_Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string DownloadDepartment() {
            object[] results = this.Invoke("DownloadDepartment", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadDepartmentAsync() {
            this.DownloadDepartmentAsync(null);
        }
        
        /// <remarks/>
        public void DownloadDepartmentAsync(object userState) {
            if ((this.DownloadDepartmentOperationCompleted == null)) {
                this.DownloadDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadDepartmentOperationCompleted);
            }
            this.InvokeAsync("DownloadDepartment", new object[0], this.DownloadDepartmentOperationCompleted, userState);
        }
        
        private void OnDownloadDepartmentOperationCompleted(object arg) {
            if ((this.DownloadDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadDepartmentCompleted(this, new DownloadDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/FODL_Web_Service:UploadToNavision", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/FODL_Web_Service", ResponseElementName="UploadToNavision_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/FODL_Web_Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string UploadToNavision(string batchNo, int lineNo, string documentNo, string itemNo, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime postingDate, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime documentDate, int qtyRequest, string equipmentNo, string officeCode, string fuelCode, string locationCode, string deptCode) {
            object[] results = this.Invoke("UploadToNavision", new object[] {
                        batchNo,
                        lineNo,
                        documentNo,
                        itemNo,
                        postingDate,
                        documentDate,
                        qtyRequest,
                        equipmentNo,
                        officeCode,
                        fuelCode,
                        locationCode,
                        deptCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadToNavisionAsync(string batchNo, int lineNo, string documentNo, string itemNo, System.DateTime postingDate, System.DateTime documentDate, int qtyRequest, string equipmentNo, string officeCode, string fuelCode, string locationCode, string deptCode) {
            this.UploadToNavisionAsync(batchNo, lineNo, documentNo, itemNo, postingDate, documentDate, qtyRequest, equipmentNo, officeCode, fuelCode, locationCode, deptCode, null);
        }
        
        /// <remarks/>
        public void UploadToNavisionAsync(string batchNo, int lineNo, string documentNo, string itemNo, System.DateTime postingDate, System.DateTime documentDate, int qtyRequest, string equipmentNo, string officeCode, string fuelCode, string locationCode, string deptCode, object userState) {
            if ((this.UploadToNavisionOperationCompleted == null)) {
                this.UploadToNavisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadToNavisionOperationCompleted);
            }
            this.InvokeAsync("UploadToNavision", new object[] {
                        batchNo,
                        lineNo,
                        documentNo,
                        itemNo,
                        postingDate,
                        documentDate,
                        qtyRequest,
                        equipmentNo,
                        officeCode,
                        fuelCode,
                        locationCode,
                        deptCode}, this.UploadToNavisionOperationCompleted, userState);
        }
        
        private void OnUploadToNavisionOperationCompleted(object arg) {
            if ((this.UploadToNavisionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadToNavisionCompleted(this, new UploadToNavisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void DownloadDepartmentCompletedEventHandler(object sender, DownloadDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void UploadToNavisionCompletedEventHandler(object sender, UploadToNavisionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadToNavisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadToNavisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591